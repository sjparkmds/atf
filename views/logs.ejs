<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ITF</title>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/highcharts-more.js"></script>
    <script src="https://code.highcharts.com/modules/series-label.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/series-label.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <script>Highcharts.setOptions({credits: {enabled: false}});</script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/gh/lafeber/world-flags-sprite/stylesheets/flags32-both.css" />
    <link rel="stylesheet" type="text/css" href="css/style.css" />
</head>

<body>

<header class="header">
    <div class="logo"><a href="https://www.mdsit.co.kr/index"><img src="images/mds_logo_horizontal.png" alt="Logo" /></a></div>
    <div class="title-container"><h1>NEO-ITF</h1><p>Integrated Testing Framework</p></div>

    <div class="menu-container">
        <a href="/" class="menu-item <%= currentPath === '/' ? 'active' : '' %>">
            <div class="menu-icon-text">
                <img src="images/inactive_home.png" alt="Home Icon" class="icon inactive"/>
                <img src="images/active_home.png" alt="Home Icon" class="icon active"/>
            </div></a>
        <a href="/logs" class="menu-item <%= currentPath === '/log' ? 'active' : '' %>">
            <div class="menu-icon-text">
                <img src="images/inactive_log.png" alt="Chart Icon" class="icon inactive"/>
                <img src="images/active_log.png" alt="Chart Icon" class="icon active"/>
            </div></a>
        <a href="/settings" class="menu-item <%= currentPath === '/settings' ? 'active' : '' %>">
            <div class="menu-icon-text">
                <img src="images/inactive_settings.png" alt="Settings Icon" class="icon inactive"/>
                <img src="images/active_settings.png" alt="Settings Icon" class="icon active"/>
            </div></a>
    </div>                 
</header>
    
    <div class="container">
        <div class="card full-width">
            <figure class="highcharts-figure">
                <div id="buttons">
                    <button id="day-button" class="chart-button">일간 추이</button>
                    <button id="week-button" class="chart-button">주간 추이</button>
                    <button id="month-button" class="chart-button">월간 추이</button>
                </div>
                <div id="chart-all"></div>
            </figure>
        </div>
    </div>

    <div class="container">
        <div class="table full-width">
            <table class="rwd-table">
                <tbody>
                    <tr>
                        <th>분석 완료 시각</th><th>프로젝트</th><th>Helix QAC</th><th>CodeSonar</th><th>VectorCAST</th>
                    </tr>
                    <% logEntries.forEach(entry => { %>
                    <tr>
                        <td><%= entry.timestamp %></td><td><%= entry.project %></td><td><%= entry.helixQAC %></td><td><%= entry.codesonar %></td><td><%= entry.vectorcast %></td>
                    </tr>
                    <% }) %>
                </tbody>
            </table>
        </div> 
    </div>

<script>
// global start
let globalStaticData;

function loadData(callback) {
        const xhr = new XMLHttpRequest();
        xhr.open('GET', '/data/staticData.json', true);
        xhr.onload = function () {
            if (xhr.status >= 200 && xhr.status < 300) {
                globalStaticData = JSON.parse(xhr.responseText);
                callback();
            } else {
                console.error('Failed to load data');
            }
        };
        xhr.onerror = function () {
            console.error('Request error');
        };
        xhr.send();
    }
// global end

// chart-all start
function initChartAll() {
    const data = globalStaticData.ChartAll;

    const chart = Highcharts.chart('chart-all', {
        chart: {
            type: 'spline',
            scrollablePlotArea: {
                minWidth: 600,
                scrollPositionX: 1
            }
        },
        title: {
            text: '전체 분석 결과 추이',
            align: 'left'
        },

        xAxis: {
            type: 'datetime',
            labels: {overflow: 'justify'}
        },
        yAxis: {
            title: {
                text: '위반율 (%)'
            },
            minorGridLineWidth: 0,
            gridLineWidth: 0,
            alternateGridColor: null,
            plotBands: [{
                from: 0.1,
                to: 1.5,
                color: 'rgba(146, 208, 80, 0.2)',
                label: {
                    text: '보통',
                    style: {color: '#606060'}
                }
            }, {
                from: 1.5,
                to: 3.3,
                color: 'rgba(255, 230, 153, 0.2)',
                label: {
                    text: '경고',
                    style: {color: '#606060'}
                }
            }, {
                from: 3.3,
                to: 20.5,
                color: 'rgba(231, 50, 71, 0.1)',
                label: {
                    text: '심각',
                    style: {color: '#606060'}
                }
            }, {
                from: 20.5,
                to: 100,
                color: 'rgba(231, 50, 71, 0.5)',
                label: {
                    text: '매우 심각',
                    style: {color: '#606060'}
                }
            }]
        },
        tooltip: {
            valueSuffix: ' %'
        },
        plotOptions: {
            spline: {
                lineWidth: 4,
                states: {
                    hover: {lineWidth: 5}
                },
                marker: {enabled: false}
            }
        },
        series: [],
        navigation: {
            menuItemStyle: {fontSize: '10px'}
        }
    });

function setDateRange(range) {
    let pointStart, pointInterval, intervalUnit, dataSeries;

    switch (range) {
        case 'day':
            pointStart = Date.UTC(2020, 7, 1); // Start from August 1, 2020
            pointInterval = 2 * 3600 * 1000; // 2 hours
            intervalUnit = 'hour';
            dataSeries = data.day;
            chart.update({
                xAxis: {
                    min: pointStart,
                    max: pointStart + 24 * 3600 * 1000 - pointInterval, // One day (24 hours)
                    tickInterval: pointInterval,
                    labels: {
                        formatter: function () {
                            return Highcharts.dateFormat('%H:%M', this.value);
                        }
                    }
                }
            });
            break;
        case 'week':
            pointStart = Date.UTC(2020, 7, 3); // Start from first Monday of August 2020
            pointInterval = 24 * 3600 * 1000; // One day
            intervalUnit = 'day';
            dataSeries = data.week;
            chart.update({
                xAxis: {
                    min: pointStart,
                    max: pointStart + 7 * 24 * 3600 * 1000 - pointInterval, // One week (7 days)
                    tickInterval: pointInterval,
                    labels: {
                        formatter: function () {
                            return Highcharts.dateFormat('%A', this.value); // Day names
                        }
                    }
                }
            });
            break;
        case 'month':
            pointStart = Date.UTC(2020, 7, 1); // Start from August 1, 2020
            pointInterval = 24 * 3600 * 1000; // One day
            intervalUnit = 'day';
            dataSeries = data.month;
            chart.update({
                xAxis: {
                    min: pointStart,
                    max: pointStart + 30 * 24 * 3600 * 1000, // One month (31 days for August)
                    tickInterval: pointInterval,
                    labels: {
                        formatter: function () {
                            return Highcharts.dateFormat('%b %e', this.value);
                        }
                    }
                }
            });
            break;
}

    chart.series.forEach(series => series.remove(false));
    dataSeries.forEach(series => {
        chart.addSeries({
            name: series.name,
            data: series.data,
            pointStart: pointStart,
            pointInterval: pointInterval
        }, false);
    });
    chart.redraw();
}

    setDateRange('week');

    document.getElementById('day-button').addEventListener('click', () => setDateRange('day'));
    document.getElementById('week-button').addEventListener('click', () => setDateRange('week'));
    document.getElementById('month-button').addEventListener('click', () => setDateRange('month'));
}
//------------------chart-all end

loadData(function () {
initChartAll();
});

</script>

</body>
</html>