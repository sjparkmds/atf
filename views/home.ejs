<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ITF</title>

    <link rel="preload" href="images/inactive_home.png" as="image">
    <link rel="preload" href="images/active_home.png" as="image">
    <link rel="preload" href="images/inactive_log.png" as="image">
    <link rel="preload" href="images/active_log.png" as="image">
    <link rel="preload" href="images/inactive_settings.png" as="image">
    <link rel="preload" href="images/active_settings.png" as="image">
    <link rel="stylesheet" type="text/css" href="css/style.css" />
</head>

<body>

<header class="header">
    <div class="logo"><a href="https://www.mdsit.co.kr/index"><img src="images/mds_logo_horizontal.png" alt="Logo" /></a></div>
    <div class="title-container"><h1>NEO-ITF</h1><p>Integrated Testing Framework</p></div>

    <div class="menu-container">
        <a href="/" class="menu-item <%= currentPath === '/' ? 'active' : '' %>">
            <div class="menu-icon-text">
                <img src="images/inactive_home.png" alt="Home Icon" class="icon inactive"/>
                <img src="images/active_home.png" alt="Home Icon" class="icon active"/>
            </div></a>
        <a href="/logs" class="menu-item <%= currentPath === '/log' ? 'active' : '' %>">
            <div class="menu-icon-text">
                <img src="images/inactive_log.png" alt="Chart Icon" class="icon inactive"/>
                <img src="images/active_log.png" alt="Chart Icon" class="icon active"/>
            </div></a>
        <a href="/settings" class="menu-item <%= currentPath === '/settings' ? 'active' : '' %>">
            <div class="menu-icon-text">
                <img src="images/inactive_settings.png" alt="Settings Icon" class="icon inactive"/>
                <img src="images/active_settings.png" alt="Settings Icon" class="icon active"/>
            </div></a>
    </div>                 
</header>

    <div class="container progress-bar-container">
        <div id="current-time"><%= currentTime %></div>
        <div class="global-progress-bar"><div class="progress-bar" id="progress-bar">0%</div></div>
        <div id="completion-time"><%= completionTime %></div>        
    </div>
    

<script>
document.addEventListener("DOMContentLoaded", function() {
    let currentPath = window.location.pathname;
    currentPath = currentPath === '' || currentPath === '/' ? '/' : currentPath.replace(/\/$/, '');
    const menuItems = document.querySelectorAll('.menu-item');
    menuItems.forEach(item => {
        const href = item.getAttribute('href');
        if (href === currentPath) { item.classList.add('active'); }
    });

    pollProgress(); 
    updateTime(); 
    setInterval(updateTime, 1000);
    refreshPageData;
});

let hasCompleted = false;

function pollProgress() {
const intervalId = setInterval(() => {
    fetch('/pipeline-progress')
        .then(response => response.json())
        .then(data => {
            if (data.progress === undefined) {
                throw new Error('Progress data is missing');
            }
            updateProgressBar(data.progress);
            
            if (data.progress === 100) {
                clearInterval(intervalId);  // Stop polling once progress reaches 100%
                hasCompleted = true;        // Set flag to true to prevent repeated refresh
                fetchCompletionTime();      // Fetch the final completion time
            } else {
                fetchCompletionTime(); // Continue to fetch completion time if progress < 100%
            }
        })
        .catch(error => {
            clearInterval(intervalId); 
            console.error('Error fetching pipeline progress:', error.message);
        });
}, 1000); // Poll every second
}

function fetchCompletionTime() {
    fetch('/completion-time')
        .then(response => response.json())
        .then(data => {
            if (data.completionTime) {
                document.getElementById('completion-time').textContent = '완료 시각 : ' + data.completionTime;
            } else {
                document.getElementById('completion-time').textContent = ''; // Clear if no completion time
                console.error('Completion time is missing');
            }
        })
        .catch(error => {
            console.error('Error fetching completion time:', error.message);
        });
}

function updateProgressBar(percentage) {
    const progressBar = document.getElementById('progress-bar');
    progressBar.style.width = percentage + '%';
    progressBar.textContent = percentage + '%';
}

function updateTime() {
    const now = new Date().toLocaleString('ko-KR', {year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric'});
    document.getElementById('current-time').textContent = '현재 시각 : ' + now;
}

function updateHelixResults(helixSummary) {
if (helixSummary) {
    document.querySelector('.helix-summary h1').textContent = helixSummary.rulesWithViolations;
    const rateElement = document.querySelector('.helix-summary h3');
} else {}
}

function updateCodeSonarResults(codesonarSummary) {
    if (codesonarSummary) {
        document.querySelector('.codesonar-summary h1').textContent = codesonarSummary.activeWarnings;
        const rateElement = document.querySelector('.codesonar-summary h3');
    } else {}
}

function updateVectorCASTResults(vectorCASTSummary) {
    if (vectorCASTSummary) {
        document.querySelector('.vectorcast-summary h1').textContent = vectorCASTSummary.passFail;
        const rateElement = document.querySelector('.vectorcast-summary h3');
    } else {}
}

function refreshPageData() {
updateHelixResults();
updateCodeSonarResults();
updateVectorCASTResults();
}

const existingProjects = <%- JSON.stringify(projects) %>;
    existingProjects.forEach(projectName => addProjectField(projectName));
let projectCount = 1;

function addProjectField(projectName) {
    const newField = document.createElement('div');
    newField.className = 'card-group';
    newField.innerHTML = `
        <div class="card quarter-width"><h1 class="card-title">${projectName}</h1></div>
        <div class="card quarter-width quarter-width-inactive">
            <div class="inactive"><h2>Helix QAC</h2><p>Not Available</p></div>
        </div>
        <div class="card quarter-width quarter-width-inactive">
            <div class="inactive"><h2>CodeSonar</h2><p>Not Available</p></div>
        </div>
        <div class="card quarter-width quarter-width-inactive">
            <div class="inactive"><h2>VectorCAST</h2><p>Not Available</p></div>
        </div>
    `;
    document.getElementById('projectsContainer').appendChild(newField);
}

</script>

<div class="container">
    <div class="card quarter-width"><h1 class="card-title">Projects</h1></div>
    <div class="card quarter-width"><h1 class="card-title">Helix QAC</h1></div>
    <div class="card quarter-width"><h1 class="card-title">CodeSonar</h1></div>
    <div class="card quarter-width"><h1 class="card-title">VectorCAST</h1></div>
</div>


<div class="container card-group">

    <div class="card quarter-width"><h1 class="card-title">Project</h1></div>

    <div class="card quarter-width <%= helixSummary ? '' : 'quarter-width-inactive' %>">
        <% if (helixSummary) { %>
            <div><h1 class="card-big-number"><%= helixSummary.rulesWithViolations %></h1></div><p>Violations</p>
        <% } else { %>
            <div class="inactive"><h2>Helix QAC</h2><br><p>Not Available</p></div>
        <% } %>
    </div>
    
    <div class="card quarter-width <%= codesonarSummary ? '' : 'quarter-width-inactive' %>">
        <% if (codesonarSummary) { %>
            <div><h1 class="card-big-number"><%= codesonarSummary.activeWarnings %></h1></div><p>Active Warnings</p>
        <% } else { %>
            <div class="inactive"><h2>CodeSonar</h2><br><p>Not Available</p></div>
        <% } %>
    </div>
    
    <div class="card quarter-width <%= vectorCASTSummary ? '' : 'quarter-width-inactive' %>">
        <% if (vectorCASTSummary) { %>
            <div><h1 class="card-big-number"><%= vectorCASTSummary.passFail %></h1></div><p>Pass / Test Cases</p>
        <% } else { %>
            <div class="inactive"><h2>VectorCAST</h2><br><p>Not Available</p></div>
        <% } %>
    </div>
    
</div>

</body>
</html>